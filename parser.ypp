%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    using namespace std; 

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
/* %error-verbose */
%define parse.error verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%union {
    std::list<Proc_ptr>* u_proc_list;
    Program* u_program;
    std::list<Decl_ptr>* u_decl_list;
    Proc* u_proc;
    std::list<Stat_ptr>* u_stat_list;
    Procedure_block* u_procedure_block;
    Nested_block* u_nested_block;
    std::list<SymName_ptr>* u_symname_list;
    Decl* u_decl;
    Stat* u_stat;
    std::list<Expr_ptr>* u_expr_list;
    Return_stat* u_return_stat;
    Type* u_type;
    Expr* u_expr;
    Lhs* u_lhs;
    SymName* u_symname;
    Primitive* u_primitive;
    StringPrimitive* u_stringprimitive;
    char* u_base_charptr;
    int u_base_int;
}

%type <u_program> Program
%type <u_proc_list> Procedures
%type <u_proc> Procedure
%type <u_decl_list> ParamList
%type <u_decl> Param
%type <u_symname_list> IDList
%type <u_type> Type
%type <u_procedure_block> Body 
%type <u_decl_list> Declarations
%type <u_decl> Declaration
%type <u_stat_list> Statements
%type <u_stat> Statement
%type <u_lhs> LHS
%type <u_expr> Expression
%type <u_expr_list> ExpressionList
%type <u_expr_list> ExpressionListOpt
%type <u_return_stat> Return
%type <u_nested_block> Block 

%token <u_base_charptr> IDENTIFIER
%token <u_base_int> INT_LITERAL
%token <u_base_int> CHAR_LITERAL
%token <u_base_int> BOOL_LITERAL
%token <u_base_charptr> STRING_LITERAL

%token BOOLEAN CHAR INTEGER STRING INTPTR CHARPTR 
%token IF ELSE WHILE VAR PROCEDURE RETURN NULLTOKEN AND 
%token DIV EQUAL EQUALS GT GTE LT LTE MINUS NOT 
%token NOTEQUAL OR PLUS MUL AMP DEREFERENCE 
%token COMMA COLON 
%token LBRACE RBRACE SEMICOLON LPAREN RPAREN BAR 
%token LBRACKET RBRACKET  

%left OR
%left AND
%left EQUALS NOTEQUAL
%left LT LTE GT GTE
%left PLUS MINUS
%left MUL DIV
%right NOT DEREFERENCE AMP

%%

Program : Procedure Procedures { 
            $2->push_front($1); 
            $$ = new ProgramImpl($2);
            ast = $$;
        } 
        | { $$ = new ProgramImpl(new list<Proc_ptr>()); 
            ast = $$; 
        }
        ;

Procedures : { $$ = new list<Proc_ptr>(); }
           | Procedure Procedures { 
                $2->push_front($1); 
                $$ = $2; 
             }
           ;

Procedure : PROCEDURE IDENTIFIER LPAREN ParamList RPAREN RETURN Type LBRACE Body RBRACE {
                $$ = new ProcImpl(new SymName($2), $4, $7, $9); 
            }
          ;

ParamList : { $$ = new list<Decl_ptr>(); }
          | Param { $$ = new list<Decl_ptr> {$1}; }
          | ParamList SEMICOLON Param { 
                $1->push_back($3);
                $$ = $1;
            }
          ;

Param : IDList COLON Type { $$ = new DeclImpl($1, $3); }
      ;

IDList : IDENTIFIER { $$ = new list<SymName_ptr>{new SymName($1)}; }
       | IDENTIFIER COMMA IDList {
            $3->push_front(new SymName($1));
            $$ = $3;
        }
       ;

Body : Procedures Declarations Statements Return {
            $$ = new Procedure_blockImpl($1, $2, $3, $4);
        }
     ;

Return : RETURN Expression SEMICOLON { $$ = new Return($2); }
       ;

Declarations : { $$ = new std::list<Decl_ptr>(); }
             | Declaration Declarations { 
                   $2->push_front($1);
                   $$ = $2;
               }
             ;

Declaration : VAR IDList COLON Type SEMICOLON { $$ = new DeclImpl($2, $4); } 
            | VAR IDList COLON STRING LBRACKET INT_LITERAL RBRACKET SEMICOLON { 
                  Primitive *temp = new Primitive($6);
                  Type *tempA = new TString(temp);
                  $$ = new DeclImpl($2, tempA);
              }  
            ;

Statements : { $$ = new std::list<Stat_ptr>(); }
           | Statement Statements {
                 $2->push_front($1);
                 $$ = $2;
             } 
           ;

Statement : LHS EQUAL Expression SEMICOLON { $$ = new Assignment($1, $3); }
          | LHS EQUAL STRING_LITERAL SEMICOLON { $$ = new StringAssignment($1, new StringPrimitive($3)); }
          | LHS EQUAL IDENTIFIER LPAREN ExpressionListOpt RPAREN SEMICOLON { $$ = new Call($1, new SymName($3), $5); }
          | IF LPAREN Expression RPAREN Block { $$ = new IfNoElse($3, $5); }
          | IF LPAREN Expression RPAREN Block ELSE Block { $$ = new IfWithElse($3, $5, $7); }
          | WHILE LPAREN Expression RPAREN Block { $$ = new WhileLoop($3, $5); }
          | Block { $$ = new CodeBlock($1); }
;

LHS : IDENTIFIER { $$ = new Variable(new SymName($1)); }
    | IDENTIFIER LBRACKET Expression RBRACKET { $$ = new ArrayElement(new SymName($1), $3); }
    | DEREFERENCE IDENTIFIER { $$ = new DerefVariable(new SymName($2)); }
    ;

ExpressionListOpt : { $$ = new std::list<Expr_ptr>(); }
                  | ExpressionList

ExpressionList : Expression COMMA ExpressionList { $3->push_front($1); $$ = $3; }
               | Expression { $$ = new std::list<Expr_ptr> {$1}; }
               ;

Expression : LPAREN Expression RPAREN { $$ = $2; }
           | BAR Expression BAR { $$ = new AbsoluteValue($2); } 
           | AMP LHS { $$ = new AddressOf($2); } 
           | Expression AND Expression { $$ = new And($1, $3); }
           | Expression DIV Expression  { $$ = new Div($1, $3); } 
           | Expression EQUALS Expression { $$ = new Compare($1, $3); } 
           | Expression GT Expression  { $$ = new Gt($1, $3); }
           | Expression GTE Expression  { $$ = new Gteq($1, $3); }
           | Expression LT Expression { $$ = new Lt($1, $3); }
           | Expression LTE Expression { $$ = new Lteq($1, $3); }
           | Expression MINUS Expression  { $$ = new Minus($1, $3); }
           | Expression NOTEQUAL Expression { $$ = new Noteq($1, $3); }
           | Expression OR Expression { $$ = new Or($1, $3); } 
           | Expression PLUS Expression  { $$ = new Plus($1, $3); }
           | Expression MUL Expression { $$ = new Times($1, $3); }
           | NOT Expression {$$ = new Not($2);} 
           | MINUS Expression {$$ = new Uminus($2);} 
           | IDENTIFIER { $$ = new Ident(new SymName($1)); }
           | IDENTIFIER LBRACKET Expression RBRACKET { $$ = new ArrayAccess(new SymName($1), $3); }
           | INT_LITERAL { $$ = new IntLit(new Primitive($1)); }
           | CHAR_LITERAL { $$ = new CharLit(new Primitive($1)); } 
           | BOOL_LITERAL { $$ = new BoolLit(new Primitive($1)); } 
           | DEREFERENCE Expression { $$ = new Deref($2); }
           | NULLTOKEN { $$ = new NullLit(); }
           ; 

Type : BOOLEAN { $$ = new TBoolean(); }
     | CHAR { $$ = new TCharacter(); } 
     | INTEGER { $$ = new TInteger(); }
     | INTPTR { $$ = new TIntPtr(); }
     | CHARPTR { $$ = new TCharPtr(); }
     ;

Block : LBRACE Declarations Statements RBRACE { $$ = new Nested_blockImpl($2, $3); } 
      ;

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(1);
}
